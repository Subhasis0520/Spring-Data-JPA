
   1) save():--
         It is used to insert and update the data.
         
           syntax--> Object save(Object entity)
           example-->           
		     Student s = new Student();
		     s.setSid(101);
		     s.setSName("Sudip");
		     s.setGender("male");
		     s.setResult(65.6);		
		     repo.save(s);	
		     
   
   2) saveAll():--
         To insert and update collection of records.
            syntax--> Iterable<Object> saveAll(Iterable<Object> entities)
            example--> 
                Student s1 = new Student();
		        s1.setSid(103);
		        s1.setSName("Anup");
		        s1.setGender("male");
		        s1.setResult(82.6);
		
		        Student s2 = new Student();
		        s2.setSid(104);
		        s2.setSName("Sweta");
		        s2.setGender("female");
		        s2.setResult(72.6);
		
		        List<Student> list = Arrays.asList(s1,s2);
		        repo.saveAll(list);
		        
		
	3) existsById():--
	       To check presence of the record(true or false)
	          syntax--> boolean existsById(ID id)
	          Example-->
	             boolean status = repo.existsById(105);
	             System.out.println("Record persent:: "+status);
	             
	 
	4) count():--
	      To get records count from the table. Returns the number of entities available.
	          syntax-->  long count(); 
	          Example--> 
	           	 long count = repo.count();
		         System.out.println("Records present inside table: "+count); 
		         
	
	5) findById():--
	        Retrieves an entity based on PK.
	           syntax--> Optional<T> findById(ID id)
	           Example-->
	              Optional<Student> id = repo.findById(103);
		             if(id.isPresent())
		             	System.out.println(id.get());
		             	
	
	6) findAllById():--
	      Returns all instances of the given PKs.
	         syntax--> Iterable<T> findAllById(Iterable<ID> ids)
	         Example--> 
	            List<Integer> list = Arrays.asList(101,103,105,104);
		        Iterable<Student> findAllById = repo.findAllById(list);
		
		        for(Student s : findAllById)
		        	System.out.println(s);
	         
	
	7) findAll():--	    
	       Returns all instances.
	          syntax--> Iterable<T> findAll()
	          Example-->          	        
		        Iterable<Student> findAll = repo.findAll();
		        for(Student s : findAll)
			        System.out.println(s);
			        
			        
	8) deleteById():--
	        Deletes the entity with the given PK id.
	           syntax--> void deleteById(ID id)
	           Example-->
	              if(repo.existsById(104))
		                repo.deleteById(104);
		          else
		          	System.out.println("No record found");
	           
	           
	9) deleteAllById():--
	         Deletes all instances based on PKs.
	            syntax--> void deleteAllById(Iterable<? extends ID> ids)
	            Example--> 
	              repo.deleteAllById(Arrays.asList(101,102,104));
	            
	            
	10) delete():--
	        Delete the record based on given entity object.
	            syntax--> void delete(T entity)
	            Example--> 
	               Student s = new  Student();
		           s.setSid(101);
		           repo.delete(s);
		           
		           
	11) deleteAll():--
	        Delete all the records from table.
	        Delete the record based on given entity objects.
	           syntax--> void deleteAll();
	                     void deleteAll(Iterable<? extends T> entities)
	           Example--> 
	               repo.deleteAll();
			        
			        
		        
		        
		        
		        
		        
		        
		        
		        			     